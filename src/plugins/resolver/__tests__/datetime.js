const Context = require('../../../context-resolve')
const Logger = require('../../../logger')

const Plugin = require('../datetime')

describe('test now resolver', () => {
  test('return datetime', () => {
    let logger = new Logger()
    let ctx = new Context(jest.fn(), logger)
    let v1 = Plugin.handler(ctx, ['- 1d', '2018-05-07T09:50:15.310Z'])
    let v2 = Plugin.handler(ctx, ['1d', '2018-05-07T09:50:15.310Z'])
    let v3 = Plugin.handler(ctx, ['1d:shortDate', '2018-05-07T09:50:15.310Z'])
    let v4 = Plugin.handler(ctx, ['1d 4h', '2018-05-07T09:50:15.310Z'])
    let v5 = Plugin.handler(ctx, ['1d 4h', 1525686615310])
    let v6 = Plugin.handler(ctx, ['1d:dddd, mmmm d, yyyy', '2018-05-07T09:50:15.310Z'])
    let v7 = Plugin.handler(ctx, null)
    let v8 = Plugin.handler(ctx, ['1d'])
    let v9 = Plugin.handler(ctx, [])
    logger.tryThrow()
    expect(v1).toBe('2018-05-06T09:50:15.310Z')
    expect(v2).toBe('2018-05-08T09:50:15.310Z')
    expect(v3).toBe('5/8/18')
    expect(v4).toBe('2018-05-08T13:50:15.310Z')
    expect(v5).toBe('2018-05-08T13:50:15.310Z')
    expect(v6).toBe('Tuesday, May 8, 2018')
    expect(new Date(v7).getTime() - Date.now() < 500).toBe(true)
    expect(new Date(v8).getTime() - Date.now() - 86400000 < 500).toBe(true)
    expect(new Date(v9).getTime() - Date.now() < 500).toBe(true)
  })
  test('log error if arguments refDate is invalid', () => {
    let logger = new Logger()
    let ctx = new Context(jest.fn(), logger)
    expect(Plugin.handler(ctx, ['1d', 'abc']))
    expect(logger.toString()).toMatch(`arguments of refDate invalid`)
  })
  test('log error if arguments is not array', () => {
    let logger = new Logger()
    let ctx = new Context(jest.fn(), logger)
    expect(Plugin.handler(ctx, {})).toBeUndefined()
    expect(logger.toString()).toMatch(`arguments must be array`)
  })
  test('log error if arguments format options is invalid', () => {
    let logger = new Logger()
    let ctx = new Context(jest.fn(), logger)
    expect(Plugin.handler(ctx, ['1d:abc'])).toBeUndefined()
    expect(logger.toString()).toMatch(`arguments of format options invalid, abc`)
  })
})
